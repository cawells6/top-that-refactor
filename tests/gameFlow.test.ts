import { createMockSocket, createMockIO, MockSocket, MockIO } from './testUtils.js';
import GameController from '../controllers/GameController.js';
import GameState from '../models/GameState.js';
import { JOINED, LOBBY, STATE_UPDATE, NEXT_TURN } from '../src/shared/events.js';
import { JoinGamePayload } from '../src/shared/types.js';

// --- Type Definitions for Mocks ---
// Remove local MockSocket, MockIO, and related mock factory code

// --- Mock Implementations ---
let globalMockSocket: MockSocket;
let topLevelEmitMock: jest.Mock;
let mockIo: MockIO;

// Add a type for state payloads emitted in tests
interface StatePayload {
  players: any[];
  currentPlayerId: string;
  started: boolean;
}

describe('Game Flow - Single Player vs CPU (manual start)', () => {
  let gameController: GameController;

  beforeEach(() => {
    topLevelEmitMock = jest.fn();
    mockIo = createMockIO(topLevelEmitMock);

    globalMockSocket = createMockSocket('socket-id-1', topLevelEmitMock);

    if (mockIo.sockets && mockIo.sockets.sockets) {
      mockIo.sockets.sockets.clear();
      mockIo.sockets.sockets.set(globalMockSocket.id, globalMockSocket);
    }

    mockIo.on.mockClear();
    mockIo.to.mockClear();
    // Pass a dummy roomId for tests (required by GameController constructor)
    gameController = new GameController(mockIo as any, 'test-room');
  });

  test('Player joins and host starts game with 1 CPU, initial state is broadcast', () => {
    const joinPayload: JoinGamePayload = {
      playerName: 'Player1',
      numHumans: 1,
      numCPUs: 1,
      roomId: 'test-room',
    };
    (gameController['publicHandleJoin'] as Function)(globalMockSocket, joinPayload);

    // Game should not auto-start for human vs CPU
    expect(gameController['gameState'].started).toBe(false);
    (gameController['handleStartGame'] as Function)({ computerCount: 1, socket: globalMockSocket });

    expect(gameController['gameState'].started).toBe(true);
    // Player IDs are now generated by the server, so check by name
    const player = Array.from(gameController['players'].values()).find(
      (p) => p.name === joinPayload.playerName
    );
    expect(player).toBeDefined();
    expect(gameController['players'].has('COMPUTER_1')).toBe(true);

    // After start, CPUs should be present and game should be started
    expect(gameController['gameState'].started).toBe(true);
    expect(gameController['players'].has('COMPUTER_1')).toBe(true);

    // Find the state update with started: true
    const stateUpdateAfterStart = topLevelEmitMock.mock.calls.find(
      (call) => call[0] === STATE_UPDATE && (call[1] as any)?.started === true
    );
    expect(stateUpdateAfterStart).toBeDefined();
    const emittedState = stateUpdateAfterStart![1] as any;
    expect(emittedState.players.length).toBe(2);
    // The first player is the human
    expect(emittedState.players.some((p: any) => p.name === joinPayload.playerName)).toBe(true);

    // Check that NEXT_TURN was emitted for the human
    const nextTurnArgs = topLevelEmitMock.mock.calls.find((call) => call[0] === NEXT_TURN);
    expect(nextTurnArgs).toBeDefined();
    // Check hands were dealt
    const playerInstance = Array.from(gameController['players'].values()).find(
      (p) => p.name === joinPayload.playerName
    );
    const cpu1Instance = gameController['players'].get('COMPUTER_1');
    expect(playerInstance && playerInstance.hand.length).toBe(3);
    expect(cpu1Instance && cpu1Instance.hand.length).toBe(3);
    expect(gameController['gameState'].deck!.length).toBe(52 - 2 * 9);
  });
});

describe('Game Flow - Lobby with Extra Human', () => {
  let gameController: GameController;

  beforeEach(() => {
    topLevelEmitMock = jest.fn();
    mockIo = createMockIO(topLevelEmitMock);

    globalMockSocket = createMockSocket('socket-lobby', topLevelEmitMock);

    if (mockIo.sockets && mockIo.sockets.sockets) {
      mockIo.sockets.sockets.clear();
      mockIo.sockets.sockets.set(globalMockSocket.id, globalMockSocket);
    }

    mockIo.on.mockClear();
    mockIo.to.mockClear();
    gameController = new GameController(mockIo as any, 'test-room');
  });

  test('No auto-start when expecting another human', () => {
    const joinPayload: JoinGamePayload = {
      playerName: 'Host',
      numHumans: 2,
      numCPUs: 1,
      roomId: 'test-room',
    };
    (gameController['publicHandleJoin'] as Function)(globalMockSocket, joinPayload);
    expect(gameController['gameState'].started).toBe(false);
    expect(gameController['players'].has('COMPUTER_1')).toBe(false);
  });
});

describe('Game Flow - Manual Start by Host', () => {
  let gameController: GameController;

  beforeEach(() => {
    topLevelEmitMock = jest.fn();
    mockIo = createMockIO(topLevelEmitMock);

    globalMockSocket = createMockSocket('host-socket-id', topLevelEmitMock);

    if (mockIo.sockets && mockIo.sockets.sockets) {
      mockIo.sockets.sockets.clear();
      mockIo.sockets.sockets.set(globalMockSocket.id, globalMockSocket);
    }

    mockIo.on.mockClear();
    mockIo.to.mockClear();
    topLevelEmitMock.mockClear();
    // Pass a dummy roomId for tests (required by GameController constructor)
    gameController = new GameController(mockIo as any, 'test-room');
  });

  test('Host joins (no auto-CPUs), Player2 joins, Host starts game (no explicit CPUs)', async () => {
    topLevelEmitMock.mockClear();

    const originalHostSocketId = globalMockSocket.id;
    if (mockIo.sockets.sockets.has(originalHostSocketId)) {
      mockIo.sockets.sockets.delete(originalHostSocketId);
    }

    globalMockSocket.id = 'socket-A';
    globalMockSocket.emit = jest.fn((event: string, payload?: any) => {
      topLevelEmitMock(event, payload);
    });
    // Ensure the GameController can find this socket by its new ID
    if (mockIo.sockets && mockIo.sockets.sockets) {
      // Ensure sockets map exists
      mockIo.sockets.sockets.set(globalMockSocket.id, globalMockSocket);
    }

    const playerAJoin: JoinGamePayload = {
      playerName: 'PlayerA',
      numHumans: 2,
      numCPUs: 0,
      roomId: 'test-room',
    };
    (gameController['publicHandleJoin'] as Function)(globalMockSocket, playerAJoin);

    // Check that a JOINED event with the correct payload was emitted (allowing for extra events)
    const joinedCallHost = globalMockSocket.emit.mock.calls.find(
      (call: any) =>
        call[0] === JOINED &&
        call[1]?.name === playerAJoin.playerName &&
        call[1]?.roomId === 'test-room'
    );
    expect(joinedCallHost).toBeDefined();
    // Player IDs are now generated, so check by name
    const playerA = Array.from(gameController['players'].values()).find(
      (p) => p.name === playerAJoin.playerName
    );
    expect(playerA).toBeDefined();
    let stateUpdateCallHost = topLevelEmitMock.mock.calls.find(
      (call: any) => call[0] === STATE_UPDATE && (call[1] as StatePayload)?.started === false
    );
    expect(stateUpdateCallHost).toBeDefined();
    if (stateUpdateCallHost)
      expect((stateUpdateCallHost[1] as StatePayload).players.length).toBe(1);
    // Only clear mocks after all assertions
    topLevelEmitMock.mockClear();
    globalMockSocket.emit.mockClear();

    const playerBJoinSocket: MockSocket = {
      id: 'socket-B',
      join: jest.fn(),
      emit: jest.fn((event: string, payload?: any) => {
        topLevelEmitMock(event, payload);
      }),
      on: jest.fn((event: string, handler: (data?: any, ack?: Function) => void) => {
        (playerBJoinSocket.eventHandlers as any)[event as string] = handler;
      }),
      removeAllListeners: jest.fn(),
      eventHandlers: {},
      simulateIncomingEvent: (event, data, ack) => {
        if ((playerBJoinSocket.eventHandlers as any)[event as string]) {
          (playerBJoinSocket.eventHandlers as any)[event as string](data, ack);
        }
      },
      disconnect: jest.fn(),
    };
    mockIo.sockets.sockets.set(playerBJoinSocket.id, playerBJoinSocket);

    const playerBJoin: JoinGamePayload = {
      playerName: 'PlayerB',
      numHumans: 2,
      numCPUs: 0,
      roomId: 'test-room',
    };
    (gameController['publicHandleJoin'] as Function)(playerBJoinSocket, playerBJoin);
    // Check that a JOINED event with the correct payload was emitted for player B
    const joinedCallB = playerBJoinSocket.emit.mock.calls.find(
      (call: any) =>
        call[0] === JOINED &&
        call[1]?.name === playerBJoin.playerName &&
        call[1]?.roomId === 'test-room'
    );
    expect(joinedCallB).toBeDefined();
    // Check both players are present by name
    const playerB = Array.from(gameController['players'].values()).find(
      (p) => p.name === playerBJoin.playerName
    );
    expect(playerB).toBeDefined();
    expect(Array.from(gameController['players'].values()).map((p) => p.name)).toEqual(
      expect.arrayContaining([playerAJoin.playerName, playerBJoin.playerName])
    );
    expect(topLevelEmitMock).toHaveBeenCalledWith(
      LOBBY,
      expect.objectContaining({
        players: expect.arrayContaining([
          expect.objectContaining({ name: playerAJoin.playerName }),
          expect.objectContaining({ name: playerBJoin.playerName }),
        ]),
      })
    );
    let stateUpdateCallPlayer2 = topLevelEmitMock.mock.calls.find(
      (call) =>
        call[0] === STATE_UPDATE &&
        (call[1] as StatePayload)?.started === false &&
        (call[1] as StatePayload)?.players.length === 2
    );
    expect(stateUpdateCallPlayer2).toBeDefined();
    if (stateUpdateCallPlayer2)
      expect((stateUpdateCallPlayer2[1] as StatePayload).players.length).toBe(2);
    topLevelEmitMock.mockClear();
    globalMockSocket.emit.mockClear();

    // Check if gameState.started is false before trying to start the game
    expect(gameController['gameState'].started).toBe(false);

    globalMockSocket.id = 'socket-A';
    // Call the controller's startGame logic directly instead of simulating the event
    (gameController['handleStartGame'] as Function)({ computerCount: 0, socket: globalMockSocket });

    // After starting, the gameState.deck should be initialized with cards
    expect(gameController['gameState'].deck).not.toBeNull();
    expect(gameController['gameState'].deck!.length).toBe(52 - 2 * 9);
    const playerA_Instance = Array.from(gameController['players'].values()).find(
      (p) => p.name === playerAJoin.playerName
    );
    const playerB_Instance = Array.from(gameController['players'].values()).find(
      (p) => p.name === playerBJoin.playerName
    );
    expect(playerA_Instance && playerA_Instance.hand.length).toBe(3);
    expect(playerB_Instance && playerB_Instance.hand.length).toBe(3);

    const stateUpdateCallStart = topLevelEmitMock.mock.calls.find(
      (call) => call[0] === STATE_UPDATE && (call[1] as StatePayload)?.started === true
    );
    expect(stateUpdateCallStart).toBeDefined();
    if (stateUpdateCallStart) {
      expect((stateUpdateCallStart[1] as StatePayload).players.length).toBe(2);
      // The first player is the human who joined first
      expect(
        (stateUpdateCallStart[1] as StatePayload).players.some(
          (p: any) => p.name === playerAJoin.playerName
        )
      ).toBe(true);
    }

    const nextTurnCall = topLevelEmitMock.mock.calls.find((call) => call[0] === NEXT_TURN);
    expect(nextTurnCall).toBeDefined();
    // The first player to act is the first human
    if (nextTurnCall && playerA_Instance) expect(nextTurnCall[1]).toBe(playerA_Instance.id);
  });
});

// Custom GameState for maxPlayers test
class TestGameState extends GameState {
  constructor() {
    super();
    Object.defineProperty(this, 'maxPlayers', { value: 2 });
  }
}

describe('Comprehensive Join/Lobby/Start Flow Edge Cases', () => {
  let gameController: GameController;
  let socketA: MockSocket;
  let socketB: MockSocket;
  let socketC: MockSocket;

  beforeEach(() => {
    topLevelEmitMock.mockClear();
    socketA = createMockSocket('socket-A', topLevelEmitMock);
    socketB = createMockSocket('socket-B', topLevelEmitMock);
    socketC = createMockSocket('socket-C', topLevelEmitMock);
    mockIo = createMockIO(topLevelEmitMock);
    mockIo.sockets.sockets.clear();
    mockIo.sockets.sockets.set(socketA.id, socketA);
    mockIo.sockets.sockets.set(socketB.id, socketB);
    mockIo.sockets.sockets.set(socketC.id, socketC);
    // Ensure all sockets in the map have their emit patched
    for (const sock of mockIo.sockets.sockets.values()) {
      sock.emit = jest.fn((event: string, payload?: any) => topLevelEmitMock(event, payload));
    }
    // Debug: log all socket ids and their emit function type
    // console.log('SOCKETS IN MAP:', Array.from(mockIo.sockets.sockets.entries()).map(([id, s]) => ({ id, emitType: typeof s.emit })));
    gameController = new GameController(mockIo as any, 'test-room');
  });

  test('Prevents duplicate join with same socket/player ID', () => {
    const joinPayload: JoinGamePayload = {
      id: socketA.id,
      playerName: 'Alpha',
      numHumans: 2,
      numCPUs: 0,
      roomId: 'test-room',
    };
    let errorResult;
    (gameController['publicHandleJoin'] as Function)(socketA, joinPayload, (result: any) => {
      errorResult = result;
    });
    // Try to join again with same socket
    (gameController['publicHandleJoin'] as Function)(socketA, joinPayload, (result: any) => {
      errorResult = result;
    });
    // Should return error for duplicate
    expect(errorResult && errorResult.error).toBeDefined();
    // Only one player in the list
    expect(Array.from(gameController['players'].values()).length).toBe(1);
  });

  test('Join with missing/invalid playerName is rejected', () => {
    const joinPayload: any = { numHumans: 1, numCPUs: 0, roomId: 'test-room' };
    let errorResult;
    (gameController['publicHandleJoin'] as Function)(socketA, joinPayload, (result: any) => {
      errorResult = result;
    });
    expect(errorResult && errorResult.error).toBeDefined();
    expect(Array.from(gameController['players'].values()).length).toBe(0);
  });

  test('Join with whitespace/empty playerName is rejected', () => {
    const joinPayload: any = { playerName: '   ', numHumans: 1, numCPUs: 0, roomId: 'test-room' };
    let errorResult;
    (gameController['publicHandleJoin'] as Function)(socketA, joinPayload, (result: any) => {
      errorResult = result;
    });
    expect(errorResult && errorResult.error).toBeDefined();
    expect(Array.from(gameController['players'].values()).length).toBe(0);
  });

  test('Rejoin logic restores player state', () => {
    // Use correct payload structure and ensure join works
    const joinPayload: JoinGamePayload = {
      playerName: 'Bravo',
      numHumans: 2, // must be >= 1 and total >= 2
      numCPUs: 1,
      roomId: 'test-room',
    };
    (gameController['publicHandleJoin'] as Function)(socketA, joinPayload);
    const playerId = Array.from(gameController['players'].keys())[0];
    expect(gameController['players'].has(playerId)).toBe(true);
    // Simulate disconnect
    gameController['players'].get(playerId)!.disconnected = true;
    // Rejoin
    (gameController['publicHandleRejoin'] as Function)(socketA, 'test-room', playerId);
    expect(gameController['players'].get(playerId)!.disconnected).toBe(false);
    expect(topLevelEmitMock).toHaveBeenCalledWith(
      JOINED,
      expect.objectContaining({ id: playerId })
    );
  });

  test('Host reassignment when host disconnects before game start', () => {
    const joinPayloadA: JoinGamePayload = {
      playerName: 'Host',
      numHumans: 2,
      numCPUs: 0,
      roomId: 'test-room',
    };
    const joinPayloadB: JoinGamePayload = {
      playerName: 'Guest',
      numHumans: 2,
      numCPUs: 0,
      roomId: 'test-room',
    };
    (gameController['publicHandleJoin'] as Function)(socketA, joinPayloadA);
    (gameController['publicHandleJoin'] as Function)(socketB, joinPayloadB);
    // Simulate host disconnect
    const hostId = Array.from(gameController['players'].keys())[0];
    gameController['players'].get(hostId)!.disconnected = true;
    // Reassign host
    gameController['hostId'] = Array.from(gameController['players'].keys())[1];
    expect(gameController['players'].get(gameController['hostId'])!.status).toBe('joined');
    // Optionally, update status to 'host' in your logic
  });

  test('Prevents join when room is full', () => {
    // Use custom GameState with maxPlayers = 2
    gameController['gameState'] = new TestGameState() as any;
    const joinPayloadA: JoinGamePayload = {
      id: socketA.id,
      playerName: 'A',
      numHumans: 2,
      numCPUs: 0,
      roomId: 'test-room',
    };
    const joinPayloadB: JoinGamePayload = {
      id: socketB.id,
      playerName: 'B',
      numHumans: 2,
      numCPUs: 0,
      roomId: 'test-room',
    };
    const joinPayloadC: JoinGamePayload = {
      id: socketC.id,
      playerName: 'C',
      numHumans: 2,
      numCPUs: 0,
      roomId: 'test-room',
    };
    (gameController['publicHandleJoin'] as Function)(socketA, joinPayloadA, () => {});
    (gameController['publicHandleJoin'] as Function)(socketB, joinPayloadB, () => {});
    let errorResult;
    (gameController['publicHandleJoin'] as Function)(socketC, joinPayloadC, (result: any) => {
      errorResult = result;
    });
    // Should return error for third join
    expect(errorResult && errorResult.error).toBeDefined();
    expect(Array.from(gameController['players'].values()).length).toBe(2);
  });

  test('Prevents join after game has started', async () => {
    const joinPayloadA: JoinGamePayload = {
      id: socketA.id,
      playerName: 'A',
      numHumans: 2, // must be >= 1 and total >= 2
      numCPUs: 0,
      roomId: 'test-room',
    };
    (gameController['publicHandleJoin'] as Function)(socketA, joinPayloadA);
    await (gameController['handleStartGame'] as Function)({
      computerCount: 1,
      socket: socketA,
    });
    const joinPayloadB: JoinGamePayload = {
      id: socketB.id,
      playerName: 'B',
      numHumans: 2, // must be >= 1 and total >= 2
      numCPUs: 0,
      roomId: 'test-room',
    };
    let errorResult: any = undefined;
    (gameController['publicHandleJoin'] as Function)(socketB, joinPayloadB, (result: any) => {
      errorResult = result;
    });
    expect(errorResult && errorResult.error).toBeDefined();
    // Host and one CPU should be present
    expect(Array.from(gameController['players'].values()).length).toBe(2);
  });

  test('All relevant events are emitted with correct payloads', (done) => {
    const joinPayload: JoinGamePayload = {
      playerName: 'Eventful',
      numHumans: 2, // must be >= 1 and total >= 2
      numCPUs: 0,
      roomId: 'test-room',
    };
    (gameController['publicHandleJoin'] as Function)(socketA, joinPayload, (_result: any) => {
      (gameController['handleStartGame'] as Function)({ computerCount: 1, socket: socketA })
        .then(() => {
          // Check for JOINED and STATE_UPDATE always
          const joinedEmitted = socketA.emit.mock.calls.some((call: any) => call[0] === JOINED);
          const stateUpdateEmitted = topLevelEmitMock.mock.calls.some(
            (call) => call[0] === STATE_UPDATE
          );
          expect(joinedEmitted).toBe(true);
          expect(stateUpdateEmitted).toBe(true);
          // LOBBY is only emitted if there are enough players
          const lobbyEmitted = topLevelEmitMock.mock.calls.some((call) => call[0] === LOBBY);
          expect(lobbyEmitted).toBe(true);
          done();
          return null;
        })
        .catch(done);
    });
  });

  test('Does not emit JOINED or STATE_UPDATE on failed join', () => {
    const joinPayload: any = { numHumans: 0, numCPUs: 0, roomId: 'test-room' }; // Invalid payload
    (gameController['publicHandleJoin'] as Function)(socketA, joinPayload, (_result: any) => {});
    // Should not emit JOINED or STATE_UPDATE
    const joinedEmitted = socketA.emit.mock.calls.some((call: any) => call[0] === JOINED);
    const stateUpdateEmitted = topLevelEmitMock.mock.calls.some((call) => call[0] === STATE_UPDATE);
    expect(joinedEmitted).toBe(false);
    expect(stateUpdateEmitted).toBe(false);
  });

  test('JOINED event payload is correct on successful join', () => {
    const joinPayload: JoinGamePayload = {
      playerName: 'PayloadTest',
      numHumans: 2,
      numCPUs: 1,
      roomId: 'test-room',
    };
    (gameController['publicHandleJoin'] as Function)(socketA, joinPayload);
    const joinedCall = socketA.emit.mock.calls.find((call: any) => call[0] === JOINED);
    expect(joinedCall).toBeDefined();
    const payload = joinedCall[1];
    expect(payload).toMatchObject({
      id: expect.any(String),
      name: 'PayloadTest',
      roomId: 'test-room',
    });
  });

  test('Player can disconnect and reconnect during a game', async () => {
    const joinPayload: JoinGamePayload = {
      playerName: 'Reconnecter',
      numHumans: 2,
      numCPUs: 1,
      roomId: 'test-room',
    };
    (gameController['publicHandleJoin'] as Function)(socketA, joinPayload);
    await (gameController['handleStartGame'] as Function)({ computerCount: 1, socket: socketA });
    const playerId = Array.from(gameController['players'].keys())[0];
    // Simulate disconnect
    gameController['players'].get(playerId)!.disconnected = true;
    // Simulate reconnect
    (gameController['publicHandleRejoin'] as Function)(socketA, 'test-room', playerId);
    expect(gameController['players'].get(playerId)!.disconnected).toBe(false);
    // Should emit JOINED again
    const joinedCalls = socketA.emit.mock.calls.filter((call: any) => call[0] === JOINED);
    expect(joinedCalls.length).toBeGreaterThan(1);
  });
});
