import * as state from './state.js'nimport { renderGameState } from './render.js'nimport * as uiManager from './uiManager.js'nimport { JOINED, PLAYER_JOINED, LOBBY, STATE_UPDATE, REJOIN } from '../../src/shared/events.js'nnexport function initializeSocketHandlers(): void {n  state.socket.on('connect', () => {n    if (state.myId && state.currentRoom) {n      state.socket.emit(REJOIN, state.myId, state.currentRoom);n    } else {n      uiManager.showLobbyForm();n    }n  });n  state.socket.on(JOINED, ({ id, roomId }: { id: string; roomId: string }) => {n    state.setMyId(id);n    state.setCurrentRoom(roomId);n    state.saveSession();  });n  state.socket.on(PLAYER_JOINED, () => {n    // Handle player joined logicn  });n  state.socket.on(LOBBY, (data: { roomId: string; players: any[]; maxPlayers: number }) => {n    const { roomId, players, maxPlayers } = data;n    uiManager.showWaitingState(roomId, players.length, maxPlayers, players);n  });n  state.socket.on(STATE_UPDATE, (s: any) => {n    console.log('Received STATE_UPDATE:', s); // Added for debuggingn    renderGameState(s);n    if (s.started) uiManager.showGameTable();n  });n  state.socket.on('err', (msg: string) => {n    uiManager.showError(msg);n  });n}