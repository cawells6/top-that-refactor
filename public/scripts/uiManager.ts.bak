import { renderGameState } from './render.js';
import * as state from './state.js';
import {PLAYER_JOINED,
  LOBBY,
  STATE_UPDATE,
  REJOIN,
  START_GAME
} from '../../src/shared/events.js';
import { GameStateData, ClientStatePlayer } from '../../src/shared/types.js';

export const getLobbyContainer = (): HTMLElement | null =>
  document.getElementById('lobby-container');

export const getLobbyFormContent = (): HTMLElement | null =>
  document.getElementById('lobby-form-content');

export const getWaitingStateDiv = (): HTMLElement | null =>
  document.getElementById('waiting-state');

export const getGameTable = (): HTMLElement | null => document.getElementById('game-table'); // Corrected getter

export const getPlayerAreaBottom = (): HTMLElement | null =>
  document.getElementById('player-area-bottom');

export const getOpponentAreaTop = (): HTMLElement | null =>
  document.getElementById('opponent-area-top');

export const getOpponentAreaLeft = (): HTMLElement | null =>
  document.getElementById('opponent-area-left');

export const getOpponentAreaRight = (): HTMLElement | null =>
  document.getElementById('opponent-area-right');

export const getCopyLinkBtn = (): HTMLButtonElement | null =>
  document.getElementById('copy-link-button') as HTMLButtonElement | null;

export const getRulesButton = (): HTMLButtonElement | null =>
  document.getElementById('header-rules-button') as HTMLButtonElement | null;

export const getDealButton = (): HTMLButtonElement | null =>
  document.getElementById('header-deal-button') as HTMLButtonElement | null;

export const getRulesModal = (): HTMLElement | null => document.getElementById('rules-modal');

export const getModalOverlay = (): HTMLElement | null => document.getElementById('modal-overlay');

export const getBackToLobbyButton = (): HTMLButtonElement | null =>
  document.getElementById('back-to-lobby-button') as HTMLButtonElement | null;

export const getGameLogEntries = (): HTMLElement | null =>
  document.getElementById('game-log-entries');

export const getNameInput = (): HTMLInputElement | null =>
  document.getElementById('player-name-input') as HTMLInputElement | null;

export const $ = (id: string): HTMLElement | null => document.getElementById(id);

export function showLobbyForm(): void {
  const lobbyContainer = getLobbyContainer();
  const lobbyFormContent = getLobbyFormContent();
  const waitingStateDiv = getWaitingStateDiv();
  const table = getGameTable();
  const mainContent = document.getElementById('main-content');

  if (lobbyContainer) lobbyContainer.classList.remove('hidden');
  if (lobbyFormContent) lobbyFormContent.classList.remove('hidden');
  if (waitingStateDiv) waitingStateDiv.classList.add('hidden');
  if (table) table.classList.add('table--hidden', 'hidden');
  if (mainContent) mainContent.classList.remove('game-active'); // Remove class for lobby layout
}

export function showWaitingState(
  roomId: string,
  currentPlayers: number,
  maxPlayers: number,
  players: Pick<ClientStatePlayer, 'name' | 'disconnected' | 'isComputer'>[] // More specific type for players in lobby
): void {
  // Show the game table first (new experience)
  showGameTable();
  
  // Then show the waiting overlay
  const waitingOverlay = document.getElementById('waiting-overlay');
  if (waitingOverlay) {
    waitingOverlay.classList.remove('hidden');
  }
  
  // Update waiting heading
  const waitingHeading = document.getElementById('waiting-overlay-heading');
  if (waitingHeading) {
    waitingHeading.textContent = `Room: ${roomId} (${currentPlayers}/${maxPlayers})`;
  }
  
  // Update invite link and QR code
  const inviteInput = document.getElementById('waiting-overlay-invite-link') as HTMLInputElement | null;
  const qrImg = document.getElementById('waiting-overlay-qr-code') as HTMLImageElement | null;
  if (inviteInput) {
    const link = `${window.location.origin}?room=${roomId}`;
    inviteInput.value = link;
    if (qrImg) {
      qrImg.src = `https://chart.googleapis.com/chart?cht=qr&chl=${encodeURIComponent(link)}&chs=150x150&chld=L|0`;
      qrImg.style.display = 'block';
    }
  }
  
  // Render player list in the new overlay
  const playerListElement = document.getElementById('waiting-overlay-player-list');
  if (playerListElement) {
    playerListElement.innerHTML = '';
    
    players.forEach((p, index) => {
      const previousPlayers = playerListElement.childElementCount;
      const li = document.createElement('li');
      li.className = 'player-list-item';
      
      // Add player icon
      const iconSpan = document.createElement('span');
      iconSpan.className = 'player-icon';
      iconSpan.textContent = p.isComputer ? 'ðŸ¤–' : 'ðŸ‘¤';
      li.appendChild(iconSpan);
      
      // Add player name
      const nameSpan = document.createElement('span');
      nameSpan.className = 'player-name';
      nameSpan.textContent = p.name;
      li.appendChild(nameSpan);
      
      // Add status if disconnected
      if (p.disconnected) {
        const statusSpan = document.createElement('span');
        statusSpan.className = 'player-status';
        statusSpan.textContent = '(disconnected)';
        li.appendChild(statusSpan);
      }
      
      // Add animation class if this is a new player
      if (previousPlayers <= index) {
        li.classList.add('player-joined');
      }
      
      playerListElement.appendChild(li);
    });
  }
  
  // Show start game button only for the host (first player)
  const startGameButton = document.getElementById('waiting-overlay-start-button');
  if (startGameButton) {
    // Assuming the host is the first person who created the room
    // We need to check if the current user has the same ID as the first player
    // Since we don't have access to player IDs here, we'll just show the button for now
    // A real implementation would check if the current user is the host
    startGameButton.style.display = 'block';
  }
  
  // Set up event listeners for the overlay buttons
  setupWaitingOverlayEventListeners();
}

export function showGameTable(): void {
  const lobbyContainer = getLobbyContainer();
  const table = getGameTable();
  const mainContent = document.getElementById('main-content');

  if (lobbyContainer) lobbyContainer.classList.add('hidden');
  if (table) table.classList.remove('table--hidden', 'hidden');
  if (mainContent) mainContent.classList.add('game-active'); // Add class for game layout
}

export function showError(msg: string): void {
  alert(msg);
}

/**
 * Initializes socket event handlers.
 * NOTE: This function appears to be unused as `main.ts` imports `initializeSocketHandlers` from `socketService.ts`.
 */
export function initializeSocketHandlers(): void {
  if (!state.socket) {
    console.error('Socket not available for handlers');
    return;
  }

  // Remove existing listeners to prevent duplicates
  state.socket.removeAllListeners('connect');
  state.socket.removeAllListeners(JOINED);
  state.socket.removeAllListeners(PLAYER_JOINED);
  state.socket.removeAllListeners(LOBBY);
  state.socket.removeAllListeners(STATE_UPDATE);
  state.socket.removeAllListeners('err');

  state.socket.on('connect', () => {
    if (state.myId && state.currentRoom) {
      state.socket.emit(REJOIN, state.myId, state.currentRoom);
    } else {
      showLobbyForm();
    }
  });

  state.socket.on(JOINED, ({ id, roomId }: { id: string; roomId: string }) => {
    state.setMyId(id);
    state.setCurrentRoom(roomId);
    state.saveSession();
  });

  state.socket.on(PLAYER_JOINED, () => {
    // Handle player joined logic
  });

  state.socket.on(
    LOBBY,
    (data: {
      roomId: string;
      players: Pick<ClientStatePlayer, 'name' | 'disconnected' | 'isComputer'>[];
      maxPlayers: number;
    }) => {
      const { roomId, players, maxPlayers } = data;
      showWaitingState(roomId, players.length, maxPlayers, players);
    }
  );

  state.socket.on(STATE_UPDATE, (s: GameStateData) => {
    console.log('Received STATE_UPDATE:', s);
    renderGameState(s, state.myId);
    if (s.started) {
      showGameTable();
      // Hide the waiting overlay when the game has started
      const waitingOverlay = document.getElementById('waiting-overlay');
      if (waitingOverlay) {
        waitingOverlay.classList.add('hidden');
      }
    }
  });

  state.socket.on('err', (msg: string) => {
    showError(msg);
  });
}

// Function to set up event listeners for the waiting overlay
function setupWaitingOverlayEventListeners(): void {
  const copyBtn = document.getElementById('waiting-overlay-copy-link');
  const shareBtn = document.getElementById('waiting-overlay-share-link');
  const startBtn = document.getElementById('waiting-overlay-start-button');
  const inviteInput = document.getElementById('waiting-overlay-invite-link') as HTMLInputElement | null;

  // Remove existing event listeners first
  if (copyBtn) {
    const newCopyBtn = copyBtn.cloneNode(true);
    copyBtn.parentNode?.replaceChild(newCopyBtn, copyBtn);
    newCopyBtn.addEventListener('click', () => {
      if (inviteInput) {
        inviteInput.select();
        document.execCommand('copy');
        showToast('Link copied to clipboard!');
      }
    });
  }

  // Share button
  if (shareBtn) {
    const newShareBtn = shareBtn.cloneNode(true);
    shareBtn.parentNode?.replaceChild(newShareBtn, shareBtn);
    newShareBtn.addEventListener('click', () => {
      if (navigator.share && inviteInput) {
        navigator.share({
          title: 'Join my Top That! game',
          text: 'Click to join my Top That! card game',
          url: inviteInput.value
        }).catch(err => console.error('Error sharing:', err));
      } else {
        if (copyBtn) {
          copyBtn.click(); // Fallback to copy
        }
      }
    });
  }

  // Start game button
  if (startBtn) {
    const newStartBtn = startBtn.cloneNode(true);
    startBtn.parentNode?.replaceChild(newStartBtn, startBtn);
    newStartBtn.addEventListener('click', () => {
      if (state.socket && state.socket.connected) {
        state.socket.emit(START_GAME);
        (newStartBtn as HTMLButtonElement).disabled = true;
        (newStartBtn as HTMLButtonElement).textContent = 'Starting...';
      }
    });
  }
}

// Helper function to show a toast message
function showToast(message: string, duration = 3000): void {
  const toastContainer = document.getElementById('toast-container');
  if (!toastContainer) return;
  
  const toast = document.createElement('div');
  toast.className = 'toast';
  toast.textContent = message;
  
  toastContainer.appendChild(toast);
  
  // Show the toast
  setTimeout(() => {
    toast.classList.add('show');
  }, 10);
  
  // Hide and remove the toast after duration
  setTimeout(() => {
    toast.classList.remove('show');
    setTimeout(() => {
      if (toast.parentNode === toastContainer) {
        toastContainer.removeChild(toast);
      }
    }, 300);
  }, duration);
}

// Function to hide the waiting overlay
export function hideWaitingOverlay(): void {
  const waitingOverlay = document.getElementById('waiting-overlay');
  if (waitingOverlay) {
    waitingOverlay.classList.add('hidden');
  }
}
